#/usr/bin/env bash

# add-pacman-repository - Add PPAs to pacman
# Copyright (c) 2022-2023 Radio New Japan.
# This software is licensed under 3-clause BSD license.

set +u

_usage(){
	echo "usage: add-pacman-repository [options]"
	echo
	echo "General Options:"
	echo " -r | reponame <repo_name>                 Repository name"
	echo " -f | --fingerprint <keyring fingerprint>  Keyring fingerprint"
	echo " -k | --keyserver <key_server_url>         Key server URL"
	echo " -p | --keypkg <keyring_package_url>       Keyring package URL"
	echo " -m | --mirrorpkg <mirrorlist_package_url> Mirror list package URL"
	echo " -s | --server <server_url>                Server URL"
	echo " -i | --include <mirrorlist_path>          Path to mirror list"
	echo " -l | --siglevel<r|o|a|n>                  Set SigLevel"
	echo "      r     Required DatabaseOptional"
	echo "      o     Optional TrustedOnly"
	echo "      a     Optional TrustAll"
	echo "      n     Never"
	echo " -h | --help                               Show this help"
	echo " -v | --version                            Show version info"
}

_version(){
	echo "add-pacman-repository ${APR_VERSION}"
	echo "Adds Pacman PPAs to your environment"
	echo
	echo "Copyright (c) 2022-2023 Radio New Japan All Rights Reserved."
	echo "This software is licensed under 3-clause BSD license."
}

_main(){
	if [ "$(whoami)" != "root" ]; then
		echo "ERROR: Need to run with root!"
		exit 1
	fi

	mkdir -p /tmp/add-pacman-repository/pkg

	if [[ ${KEYRING} == "fingerprint" ]]; then
		if [[ ${KEYSERVER} == "" ]]; then
			echo "ERROR: Specify the key server!"
			exit 1
		else
			pacman-key --recv-key ${FINGERPRINT} --keyserver ${KEYSERVER}
			pacman-key --lsign-key ${FINGERPRINT}
		fi
	fi

	if [[ ${REPO} == "mirrorlist" ]]; then
		wget ${MIRRORPKG} -O /tmp/add-pacman-repository/pkg/${REPONAME}-mirrorlist.pkg.tar.zst
		pacman -U --noconfirm /tmp/add-pacman-repository/pkg/${REPONAME}-keyring.pkg.tar.zst
	fi

	if [[ ${REPO} == "direct" ]]; then
		echo "[${REPONAME}]"
		echo "SigLevel = ${SIGLEVEL}"
		echo "Server = ${SERVER}"
	elif [[ ${REPO} == "mirrorlist" ]]; then
		echo "[${REPONAME}]"
		echo "SigLevel = ${SIGLEVEL}"
		echo "Include = ${INCLUDE}"
	fi
}

APR_VERSION="0.5"

REPONAME=""
KEYRING=""
FINGERPRINT=""
KEYSERVER=""
KEYPKG=""
MIRROR=""
MIRRORPKG=""
SERVER=""
INCLUDE=""
SIGLEVEL=""
REPO=""

set +e
_opt_short="r:f:k:p:m:s:i:l:hv"
_opt_long="reponame:,fingerprint:,keyserver:,keypkg:,mirrorpkg:,server:,include:,siglevel:,help,version"
OPT=$(getopt -o ${_opt_short} -l ${_opt_long} -- "${@}" 2> /dev/null)
set -e

eval set -- "${OPT}"
echo "Arguments are \"${OPT}\""
unset OPT _opt_short _opt_long

while true; do
	case "${1}" in
		-h | --help)
			_usage
			exit 0
			;;
		-r | --reponame)
			REPONAME="${2}"
			shift 2
			;;
		-f | --fingerprint)
			KEYRING="fingerprint"
			FINGERPRINT="${2}"
			shift 2
			;;
		-k | --keyserver)
			KEYSERVER="${2}"
			shift 2
			;;
		-p | --keypkg)
			KEYRING="package"
			KEYPKG="${2}"
			shift 2
			;;
		-m)
			if [[ ${2} == "" ]]; then
				echo "ERROR: Specify the mirror list package!"
				exit 1
			else
				MIRRORPKG="${2}"
			fi
			shift 2
			;;
		-s)
			REPO="direct"
			SERVER="${2}"
			shift 2
			;;
		-i)
			REPO="mirrorlist"
			INCLUDE="${2}"
			shift 2
			;;
		-l)
			case ${2} in
				r)
					SIGLEVEL="Required DatabaseOptional"
					;;
				o)
					SIGLEVEL="Optional TrustedOnly"
					;;
				a)
					SIGLEVEL="Optional TrustAll"
					;;
				n)
					SIGLEVEL="Never"
					;;
				*)
					echo "ERROR: Invalid argument '${2}'!"
					echo " r - Set SigLevel to 'Required DatabaseOptional'"
					echo " o - Set SigLevel to 'Optional TrustedOnly'"
					echo " a - Set SigLevel to 'Optional TrustAll'"
					echo " n - Set SigLevel to 'Never'"
					exit 1
					;;
			esac
			shift 2
			;;
		-v)
			_version
			exit 0
			;;
		--)
			shift 1
			break
			;;
		*)
			echo "ERROR: Invalid argument '${1}'!"
			_usage
			exit 1
			;;
	esac
done

_main

